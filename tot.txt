MongoDB Password :zrkNQIFCJXZwRDpe

// POST
app.post("/api/insights", async (req, res) => {
  try {
    const insight = await Insights.create(req.body);
    res.status(200).json(insight);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// READ
app.get("/api/insights", async (req, res) => {
  try {
    const insights = await Insights.find({});
    res.status(200).json(insights);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});
// by id
app.get("/api/insights/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const insight = await Insights.findById(id);
    res.status(200).json(insight);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// UPDATE
app.put("/api/insights/:id", async (req, res) => {
  try {
    const { id } = req.params;

    const insight = await Insights.findByIdAndUpdate(id, req.body);

    if (!insight) {
      return res.status(404).json({ message: "Insights not found" });
    }
    const updatedInsights = await Insights.findById(id);
    res.status(200).json(updatedInsights);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});
// DELETE  LAND

app.delete("/api/insights/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const insight = await Insights.findByIdAndDelete(id);

    if (!insight) {
      return res.status(404).json({ message: "Insights not found" });
    }
    res.status(200).json({ message: "Insights deleted successfully" });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});