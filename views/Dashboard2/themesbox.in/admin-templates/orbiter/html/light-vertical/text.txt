const express = require('express');
const mongoose = require('mongoose');
const multer = require('multer');
const path = require('path');
const Land = require('./models/Land');

const app = express();
app.use(express.urlencoded({ extended: true }));
app.use(express.json());
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Connect to MongoDB
mongoose.connect('mongodb://127.0.0.1:27017/landDB', { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB Connected'))
  .catch((err) => console.error('MongoDB Connection Failed:', err));

// Configure Multer for file uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + '-' + file.originalname);
  },
});

const upload = multer({
  storage,
  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB limit
});

// CRUD Routes

// Create Land
app.post('/lands', upload.array('images', 10), async (req, res) => {
  try {
    const { title, askingPrice, description, keyFeatures, availability, status } = req.body;
    const images = req.files.map((file) => file.path);

    const land = new Land({
      title,
      images,
      askingPrice,
      description,
      keyFeatures: JSON.parse(keyFeatures),
      availability,
      status,
    });

    await land.save();
    res.status(201).json({ message: 'Land created successfully', land });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// Get All Lands
app.get('/lands', async (req, res) => {
  try {
    const lands = await Land.find();
    res.json(lands);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Update Land
app.put('/lands/:id', upload.array('images', 10), async (req, res) => {
  try {
    const { title, askingPrice, description, keyFeatures, availability, status } = req.body;
    const images = req.files.map((file) => file.path);

    const land = await Land.findByIdAndUpdate(
      req.params.id,
      {
        title,
        images,
        askingPrice,
        description,
        keyFeatures: JSON.parse(keyFeatures),
        availability,
        status,
      },
      { new: true }
    );

    if (!land) return res.status(404).json({ message: 'Land not found' });
    res.json({ message: 'Land updated successfully', land });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// Delete Land
app.delete('/lands/:id', async (req, res) => {
  try {
    const land = await Land.findByIdAndDelete(req.params.id);
    if (!land) return res.status(404).json({ message: 'Land not found' });
    res.json({ message: 'Land deleted successfully' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Serve Frontend Files
app.use(express.static(path.join(__dirname, 'public')));

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));








<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Land CRUD</title>
  <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      padding: 20px;
      box-sizing: border-box;
    }

    form {
      margin-bottom: 20px;
      max-width: 600px;
      padding: 20px;
      border: 1px solid #ccc;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    label {
      display: block;
      margin-bottom: 8px;
      font-weight: bold;
    }

    input, textarea, select, button {
      width: 100%;
      padding: 10px;
      margin-bottom: 15px;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
    }

    button {
      background-color: #007BFF;
      color: #fff;
      font-weight: bold;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    button:hover {
      background-color: #0056b3;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }

    th, td {
      border: 1px solid #ccc;
      padding: 10px;
      text-align: left;
    }

    th {
      background-color: #f4f4f4;
    }

    img {
      max-height: 50px;
    }

    .actions button {
      background: none;
      border: none;
      cursor: pointer;
    }

    .actions .edit {
      color: #007BFF;
    }

    .actions .delete {
      color: #FF0000;
    }

    @media (max-width: 600px) {
      table, th, td {
        display: block;
        width: 100%;
      }

      th, td {
        padding: 8px;
        text-align: right;
      }

      th::after {
        content: ':';
        margin-left: 5px;
      }

      .actions {
        text-align: left;
      }
    }
  </style>
</head>
<body>
  <h1>Land Property Management</h1>

  <!-- Create Form -->
  <form id="landForm" enctype="multipart/form-data">
    <h2>Create / Update Land</h2>
    <label>Title:</label>
    <input type="text" name="title" required><br>
    
    <label>Asking Price:</label>
    <input type="number" name="askingPrice" required><br>
    
    <label>Description:</label>
    <textarea name="description" required></textarea><br>
    
    <label>Key Features (comma-separated):</label>
    <input type="text" name="keyFeatures" required><br>
    
    <label>Availability:</label>
    <select name="availability">
      <option value="Available">Available</option>
      <option value="Not Available">Not Available</option>
    </select><br>
    
    <label>Status:</label>
    <select name="status">
      <option value="For Sale">For Sale</option>
      <option value="For Rent">For Rent</option>
    </select><br>
    
    <label>Images (1-10):</label>
    <input type="file" name="images" accept="image/*" multiple required><br>
    
    <button type="submit">Submit</button>
  </form>

  <h2>Land Properties</h2>
  <table>
    <thead>
      <tr>
        <th>Title</th>
        <th>Asking Price</th>
        <th>Description</th>
        <th>Key Features</th>
        <th>Availability</th>
        <th>Status</th>
        <th>Images</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody id="landTable"></tbody>
  </table>

  <script>
    const form = document.getElementById('landForm');
    const tableBody = document.getElementById('landTable');

    // Fetch lands
    async function fetchLands() {
      const res = await fetch('/lands');
      const lands = await res.json();
      tableBody.innerHTML = '';
      lands.forEach(land => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${land.title}</td>
          <td>${land.askingPrice}</td>
          <td>${land.description}</td>
          <td>${land.keyFeatures.join(', ')}</td>
          <td>${land.availability}</td>
          <td>${land.status}</td>
          <td>${land.images.map(img => `<img src="${img}" alt="Image">`).join(' ')}</td>
          <td class="actions">
            <button class="edit" onclick="editLand('${land._id}')"><i class="fas fa-edit"></i></button>
            <button class="delete" onclick="deleteLand('${land._id}')"><i class="fas fa-trash"></i></button>
          </td>
        `;
        tableBody.appendChild(row);
      });
    }

    // Create / Update Land
    form.onsubmit = async (e) => {
      e.preventDefault();
      const formData = new FormData(form);
      const method = form.dataset.id ? 'PUT' : 'POST';
      const url = form.dataset.id ? `/lands/${form.dataset.id}` : '/lands';
      await fetch(url, { method, body: formData });
      form.reset();
      delete form.dataset.id;
      fetchLands();
    };

    // Edit Land
    async function editLand(id) {
      const res = await fetch(`/lands/${id}`);
      const land = await res.json();
      form.title.value = land.title;
      form.askingPrice.value = land.askingPrice;
      form.description.value = land.description;
      form.keyFeatures.value = land.keyFeatures.join(', ');
      form.availability.value = land.availability;
      form.status.value = land.status;
      form.dataset.id = id;
    }

    // Delete Land
    async function deleteLand(id) {
      await fetch(`/lands/${id}`, { method: 'DELETE' });
      fetchLands();
    }

    // Initial Fetch
    fetchLands();
  </script>
</body>
</html>




const mongoose = require('mongoose');

const landSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
    trim: true,
  },
  images: {
    type: [String], // Array of image file paths
    validate: {
      validator: (images) => images.length >= 1 && images.length <= 10,
      message: 'You must upload between 1 and 10 images.',
    },
  },
  askingPrice: {
    type: Number,
    required: true,
  },
  description: {
    type: String,
    required: true,
  },
  keyFeatures: {
    type: [String],
    required: true,
  },
  availability: {
    type: String,
    enum: ['Available', 'Not Available'],
    default: 'Available',
  },
  status: {
    type: String,
    enum: ['For Rent', 'For Sale'],
    required: true,
  },
});

module.exports = mongoose.model('Land', landSchema);
